https://leetcode.com/problems/rotting-oranges/

class Solution {
public:
int orangesRotting(vector<vector<int>>& grid) {
        queue<vector<int>> q;
        int c = 0, result = -1;
        vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for(int i = 0; i < grid.size(); i++) {    
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j] > 0) 
                    c++;
                if(grid[i][j] == 2) 
                    q.push({i, j});
            }
        }
        while(!q.empty()) {
            result++;
            int size = q.size();
            
            for(int k = 0; k < size; k++) {
                vector<int> cur = q.front();
                c--;
                q.pop();
                for(int i = 0; i < 4; i++) {
                    int x = cur[0] + dir[i][0], y = cur[1] + dir[i][1];
                    if(x >= grid.size() || x < 0 || y >= grid[0].size()
                       || y < 0 || grid[x][y] != 1) continue; 
                    grid[x][y] = 2;
                    q.push({x, y});
                }
            }
        }
        if(c == 0) 
            return max(0, result);
        return -1;
    }
};
